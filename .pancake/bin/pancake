#!/bin/bash

positional=()

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -i|--input)
    PANDOC_INPUT="$2"
    shift # past argument
    shift # past value
    ;;
    -o|--output)
    PANDOC_OUTPUT="$2"
    shift # past argument
    shift # past value
    ;;
    -1|--once)
    PANCAKE_ONCE=true
    shift # past argument
    ;;
    -f|--from)
    PANDOC_FROM="$2"
    shift # past argument
    shift # past value
    ;;
    -e|--extensions)
    PANDOC_EXTENSIONS="$2"
    shift # past argument
    shift # past value
    ;;
    -t|--to)
    PANDOC_TO="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    positional+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${positional[@]}" # restore positional parameters

pandoc="pandoc"
conf="/root/.pancake"
cache=".cache"
log=".pancake.log"

if [ -z "$PANDOC_INPUT" ]; then
  PANDOC_INPUT="*.md"
fi

if [ -z $PANDOC_FROM ]; then
  PANDOC_FROM="${PANDOC_INPUT##*.}"
fi
if [ $PANDOC_FROM == "md" ]; then
  if [ -z $PANDOC_EXTENSIONS ]; then
    PANDOC_FROM="markdown"
  else
    PANDOC_FROM="markdown+$PANDOC_EXTENSIONS"
  fi
fi

declare -a input
if [ $# == 0 ]; then
    if [ ! ls $PANDOC_INPUT 2>/dev/null ] ; then
        echo -e "\033[1;31mNo file to convert!\033[0m";
        exit 1;
    fi
fi

while [[ $# -gt 0 ]]
do
if [ ! ls $1 2>/dev/null ] ; then
    echo -e "\033[1;31mFile '$i' not found !\033[0m";
    exit 1;
fi
shift
done

#shopt -s nullglob
input=`ls $PANDOC_INPUT`
#shopt -u nullglob

if [ -z $PANDOC_OUTPUT ]; then
    if [ -z $PANDOC_TO ]; then
        PANDOC_TO="pdf"
        PANDOC_OUTPUT="output.pdf"
    elif [ ${#input[@]} -eq 1 ]; then
        PANDOC_OUTPUT="${input[0]%.*}.$PANDOC_TO"
    fi
elif [ -z $PANDOC_TO ]; then
  PANDOC_TO="${PANDOC_OUTPUT##*.}"
fi


options="-s --template=$conf/templates/pancake --quiet --log=$log"
if [ "$PANDOC_TO" == "pdf" ] ; then
    options="$options --pdf-engine=tectonic --pdf-engine-opt=--print"
    PANDOC_TO="latex"
fi

if [ -n $PANDOC_FROM ]; then
  format="$format -f $PANDOC_FROM"
fi
if [ -n $PANDOC_TO ]; then
  format="$format -t $PANDOC_TO"
fi

update=$(echo -e "\033[1m%w%f\033[0m changed. Updating \033[1m$PANDOC_OUTPUT\033[0m…")
echo -e "Watching \033[1m$input\033[0m for changes…"
while true ; do
    mkdir $cache 2>/dev/null
    touch $log
    filters=""
    #for i in $conf/filters/* ; do
    #filters="$filters --filter $i"
    #done
    filters="$filters --filter panflute"
    
    metadata="--metadata-file=$conf/pancake.yaml"
    shopt -s nullglob
    for i in ./*.yaml; do
        metadata="$metadata --metadata-file=$i"
    done
    for i in ./styles/*.yaml; do
        metadata="$metadata --metadata-file=$i"
    done
    shopt -u nullglob
    
    if [[ $md5 == $(md5sum $input) ]] ; then
        inotifywait -qre close_write $input --format "$update"
    else
        echo -e "\033[1m$PANDOC_OUTPUT\033[0m needs updating…"
    fi
    md5=$(md5sum $input)
    fail=0
    cmd="$pandoc $options $filters $metadata $PANDOC_OPTIONS $format $input -o $PANDOC_OUTPUT"
    echo $cmd
    $cmd 2>&1 || fail=$?
    owner=($(ls -ld ${input[0]}))
    chown ${owner[2]}:${owner[3]} $PANDOC_OUTPUT 2>/dev/null
    if [ $PANCAKE_ONCE ] ; then
        exit 0;
    fi
    if [ $fail != 0 ] ; then
        echo -e '\033[1;31mConversion failed !\033[0m'
    else
        echo -e '\033[1;32mConverted with success !\033[0m'
    fi
    chmod 755 -R $cache
    chmod 755 -R $log
done
