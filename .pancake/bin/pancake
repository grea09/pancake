#!/bin/bash

POSITIONAL=()

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -o|--output)
    PANCAKE_OUTPUT="$2"
    shift # past argument
    shift # past value
    ;;
    -1|--once)
    PANCAKE_ONCE=true
    shift # past argument
    ;;
    -t|--type)
    PANCAKE_TYPE="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters

PANDOC="pandoc"
CONF="/root/.pancake"
TMP="/tmp/pancake"

if [ -z "$PANCAKE_INPUT" ]; then
  PANCAKE_INPUT="*.md"
fi

declare -a IN
if [ $# == 0 ]; then
    if [ ! ls $PANCAKE_INPUT 2>/dev/null ] ; then
        echo -e "\033[1;31mNo file to convert!\033[0m";
        exit 1;
    fi
    IN=$(ls $PANCAKE_INPUT | tr '\n' ' ')
fi

while [[ $# -gt 0 ]]
do
if [ ! ls $1 2>/dev/null ] ; then
    echo -e "\033[1;31mFile '$i' not found !\033[0m";
    exit 1;
fi

IN=("${IN[@]}" $(ls $1  | tr '\n' ' '))
shift
done

if [ -z $PANCAKE_OUTPUT ]; then
    if [ -z $PANCAKE_TYPE ]; then
        PANCAKE_TYPE="pdf"
        PANCAKE_OUTPUT="output.pdf"
    elif [ ${#IN[@]} -eq 1 ]; then
        PANCAKE_OUTPUT="${IN[0]%.*}.$PANCAKE_TYPE"
    fi
elif [ -z $PANCAKE_TYPE ]; then
  PANCAKE_TYPE="${PANCAKE_OUTPUT##*.}"
fi

UPDATE=$(echo -e "\033[1m%w%f\033[0m changed. Updating \033[1m$PANCAKE_OUTPUT\033[0m…")

OPT="-s --template=$CONF/templates/pancake"

for i in $CONF/filters/* ; do
    FILTERS="$FILTERS --filter $i"
done

echo "Filters loaded: $FILTERS"

EXTRA=" --quiet --log=/doc/.pancake.log"


if [ "$PANCAKE_TYPE" == "pdf" ] ; then
    EXTRA="$EXTRA -t latex --pdf-engine tectonic"
fi

YAML="--metadata-file=$CONF/pancake.yaml"
if ls *.yaml ; then
    for i in *.yaml ; do
        YAML="$YAML --metadata-file=$i"
    done
fi

echo -e "Watching \033[1m$IN\033[0m for changes…"
while true ; do
    if [[ $MD5 == $(md5sum $IN) ]] ; then
        inotifywait -qre close_write $IN --format "$UPDATE"
    else
        echo -e "\033[1m$PANCAKE_OUTPUT\033[0m needs updating…"
    fi
    MD5=$(md5sum $IN)
    FAIL=0
    CMD="$PANDOC $OPT $FILTERS $EXTRA $YAML $PANCAKE_OPTIONS $IN -o $PANCAKE_OUTPUT"
    echo "$CMD"
    $CMD 2>&1 || FAIL=$?
    OWNER=($(ls -ld ${IN[0]}))
    chown ${OWNER[2]}:${OWNER[3]} $PANCAKE_OUTPUT 2>/dev/null
    if [ $PANCAKE_ONCE ] ; then
        exit 0;
    fi
    if [ $FAIL != 0 ] ; then
        echo -e '\033[1;31mConversion failed !\033[0m'
    else
        echo -e '\033[1;32mConverted with success !\033[0m'
    fi
    chmod 755 -R "/data"
    chmod 755 -R "/doc/.pancake.log"
done
